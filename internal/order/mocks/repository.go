// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/google/uuid"
	"github.com/victorvcruz/shipment-coordinator/internal/order"
	"sync"
)

// Ensure, that RepositoryMock does implement order.Repository.
// If this is not the case, regenerate this file with moq.
var _ order.Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of order.Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked order.Repository
//		mockedRepository := &RepositoryMock{
//			CreateFunc: func(ctx context.Context, orderMoqParam *order.Order) (uuid.UUID, error) {
//				panic("mock out the Create method")
//			},
//			GetByIDFunc: func(ctx context.Context, id uuid.UUID) (*order.Order, error) {
//				panic("mock out the GetByID method")
//			},
//			UpdateStatusFunc: func(ctx context.Context, id uuid.UUID, status order.Status) error {
//				panic("mock out the UpdateStatus method")
//			},
//		}
//
//		// use mockedRepository in code that requires order.Repository
//		// and then make assertions.
//
//	}
type RepositoryMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, orderMoqParam *order.Order) (uuid.UUID, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id uuid.UUID) (*order.Order, error)

	// UpdateStatusFunc mocks the UpdateStatus method.
	UpdateStatusFunc func(ctx context.Context, id uuid.UUID, status order.Status) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OrderMoqParam is the orderMoqParam argument value.
			OrderMoqParam *order.Order
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// UpdateStatus holds details about calls to the UpdateStatus method.
		UpdateStatus []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
			// Status is the status argument value.
			Status order.Status
		}
	}
	lockCreate       sync.RWMutex
	lockGetByID      sync.RWMutex
	lockUpdateStatus sync.RWMutex
}

// Create calls CreateFunc.
func (mock *RepositoryMock) Create(ctx context.Context, orderMoqParam *order.Order) (uuid.UUID, error) {
	if mock.CreateFunc == nil {
		panic("RepositoryMock.CreateFunc: method is nil but Repository.Create was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		OrderMoqParam *order.Order
	}{
		Ctx:           ctx,
		OrderMoqParam: orderMoqParam,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, orderMoqParam)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedRepository.CreateCalls())
func (mock *RepositoryMock) CreateCalls() []struct {
	Ctx           context.Context
	OrderMoqParam *order.Order
} {
	var calls []struct {
		Ctx           context.Context
		OrderMoqParam *order.Order
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *RepositoryMock) GetByID(ctx context.Context, id uuid.UUID) (*order.Order, error) {
	if mock.GetByIDFunc == nil {
		panic("RepositoryMock.GetByIDFunc: method is nil but Repository.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedRepository.GetByIDCalls())
func (mock *RepositoryMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// UpdateStatus calls UpdateStatusFunc.
func (mock *RepositoryMock) UpdateStatus(ctx context.Context, id uuid.UUID, status order.Status) error {
	if mock.UpdateStatusFunc == nil {
		panic("RepositoryMock.UpdateStatusFunc: method is nil but Repository.UpdateStatus was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		ID     uuid.UUID
		Status order.Status
	}{
		Ctx:    ctx,
		ID:     id,
		Status: status,
	}
	mock.lockUpdateStatus.Lock()
	mock.calls.UpdateStatus = append(mock.calls.UpdateStatus, callInfo)
	mock.lockUpdateStatus.Unlock()
	return mock.UpdateStatusFunc(ctx, id, status)
}

// UpdateStatusCalls gets all the calls that were made to UpdateStatus.
// Check the length with:
//
//	len(mockedRepository.UpdateStatusCalls())
func (mock *RepositoryMock) UpdateStatusCalls() []struct {
	Ctx    context.Context
	ID     uuid.UUID
	Status order.Status
} {
	var calls []struct {
		Ctx    context.Context
		ID     uuid.UUID
		Status order.Status
	}
	mock.lockUpdateStatus.RLock()
	calls = mock.calls.UpdateStatus
	mock.lockUpdateStatus.RUnlock()
	return calls
}
