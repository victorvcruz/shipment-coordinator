// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/google/uuid"
	"github.com/victorvcruz/shipment-coordinator/internal/shipping"
	"sync"
)

// Ensure, that RepositoryMock does implement shipping.Repository.
// If this is not the case, regenerate this file with moq.
var _ shipping.Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of shipping.Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked shipping.Repository
//		mockedRepository := &RepositoryMock{
//			InsertFunc: func(ctx context.Context, c *shipping.Contract) (uuid.UUID, error) {
//				panic("mock out the Insert method")
//			},
//		}
//
//		// use mockedRepository in code that requires shipping.Repository
//		// and then make assertions.
//
//	}
type RepositoryMock struct {
	// InsertFunc mocks the Insert method.
	InsertFunc func(ctx context.Context, c *shipping.Contract) (uuid.UUID, error)

	// calls tracks calls to the methods.
	calls struct {
		// Insert holds details about calls to the Insert method.
		Insert []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// C is the c argument value.
			C *shipping.Contract
		}
	}
	lockInsert sync.RWMutex
}

// Insert calls InsertFunc.
func (mock *RepositoryMock) Insert(ctx context.Context, c *shipping.Contract) (uuid.UUID, error) {
	if mock.InsertFunc == nil {
		panic("RepositoryMock.InsertFunc: method is nil but Repository.Insert was just called")
	}
	callInfo := struct {
		Ctx context.Context
		C   *shipping.Contract
	}{
		Ctx: ctx,
		C:   c,
	}
	mock.lockInsert.Lock()
	mock.calls.Insert = append(mock.calls.Insert, callInfo)
	mock.lockInsert.Unlock()
	return mock.InsertFunc(ctx, c)
}

// InsertCalls gets all the calls that were made to Insert.
// Check the length with:
//
//	len(mockedRepository.InsertCalls())
func (mock *RepositoryMock) InsertCalls() []struct {
	Ctx context.Context
	C   *shipping.Contract
} {
	var calls []struct {
		Ctx context.Context
		C   *shipping.Contract
	}
	mock.lockInsert.RLock()
	calls = mock.calls.Insert
	mock.lockInsert.RUnlock()
	return calls
}
