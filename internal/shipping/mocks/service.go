// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/google/uuid"
	"github.com/victorvcruz/shipment-coordinator/internal/shipping"
	"sync"
)

// Ensure, that ServiceMock does implement shipping.Service.
// If this is not the case, regenerate this file with moq.
var _ shipping.Service = &ServiceMock{}

// ServiceMock is a mock implementation of shipping.Service.
//
//	func TestSomethingThatUsesService(t *testing.T) {
//
//		// make and configure a mocked shipping.Service
//		mockedService := &ServiceMock{
//			ContractCarrierFunc: func(ctx context.Context, orderID uuid.UUID, carrierID uuid.UUID) (*shipping.Contract, error) {
//				panic("mock out the ContractCarrier method")
//			},
//			QuoteAllFunc: func(ctx context.Context, orderID uuid.UUID) ([]*shipping.Quote, error) {
//				panic("mock out the QuoteAll method")
//			},
//		}
//
//		// use mockedService in code that requires shipping.Service
//		// and then make assertions.
//
//	}
type ServiceMock struct {
	// ContractCarrierFunc mocks the ContractCarrier method.
	ContractCarrierFunc func(ctx context.Context, orderID uuid.UUID, carrierID uuid.UUID) (*shipping.Contract, error)

	// QuoteAllFunc mocks the QuoteAll method.
	QuoteAllFunc func(ctx context.Context, orderID uuid.UUID) ([]*shipping.Quote, error)

	// calls tracks calls to the methods.
	calls struct {
		// ContractCarrier holds details about calls to the ContractCarrier method.
		ContractCarrier []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OrderID is the orderID argument value.
			OrderID uuid.UUID
			// CarrierID is the carrierID argument value.
			CarrierID uuid.UUID
		}
		// QuoteAll holds details about calls to the QuoteAll method.
		QuoteAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OrderID is the orderID argument value.
			OrderID uuid.UUID
		}
	}
	lockContractCarrier sync.RWMutex
	lockQuoteAll        sync.RWMutex
}

// ContractCarrier calls ContractCarrierFunc.
func (mock *ServiceMock) ContractCarrier(ctx context.Context, orderID uuid.UUID, carrierID uuid.UUID) (*shipping.Contract, error) {
	if mock.ContractCarrierFunc == nil {
		panic("ServiceMock.ContractCarrierFunc: method is nil but Service.ContractCarrier was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		OrderID   uuid.UUID
		CarrierID uuid.UUID
	}{
		Ctx:       ctx,
		OrderID:   orderID,
		CarrierID: carrierID,
	}
	mock.lockContractCarrier.Lock()
	mock.calls.ContractCarrier = append(mock.calls.ContractCarrier, callInfo)
	mock.lockContractCarrier.Unlock()
	return mock.ContractCarrierFunc(ctx, orderID, carrierID)
}

// ContractCarrierCalls gets all the calls that were made to ContractCarrier.
// Check the length with:
//
//	len(mockedService.ContractCarrierCalls())
func (mock *ServiceMock) ContractCarrierCalls() []struct {
	Ctx       context.Context
	OrderID   uuid.UUID
	CarrierID uuid.UUID
} {
	var calls []struct {
		Ctx       context.Context
		OrderID   uuid.UUID
		CarrierID uuid.UUID
	}
	mock.lockContractCarrier.RLock()
	calls = mock.calls.ContractCarrier
	mock.lockContractCarrier.RUnlock()
	return calls
}

// QuoteAll calls QuoteAllFunc.
func (mock *ServiceMock) QuoteAll(ctx context.Context, orderID uuid.UUID) ([]*shipping.Quote, error) {
	if mock.QuoteAllFunc == nil {
		panic("ServiceMock.QuoteAllFunc: method is nil but Service.QuoteAll was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		OrderID uuid.UUID
	}{
		Ctx:     ctx,
		OrderID: orderID,
	}
	mock.lockQuoteAll.Lock()
	mock.calls.QuoteAll = append(mock.calls.QuoteAll, callInfo)
	mock.lockQuoteAll.Unlock()
	return mock.QuoteAllFunc(ctx, orderID)
}

// QuoteAllCalls gets all the calls that were made to QuoteAll.
// Check the length with:
//
//	len(mockedService.QuoteAllCalls())
func (mock *ServiceMock) QuoteAllCalls() []struct {
	Ctx     context.Context
	OrderID uuid.UUID
} {
	var calls []struct {
		Ctx     context.Context
		OrderID uuid.UUID
	}
	mock.lockQuoteAll.RLock()
	calls = mock.calls.QuoteAll
	mock.lockQuoteAll.RUnlock()
	return calls
}
