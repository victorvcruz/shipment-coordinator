// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/victorvcruz/shipment-coordinator/internal/carrier"
	"sync"
)

// Ensure, that ServiceMock does implement carrier.Service.
// If this is not the case, regenerate this file with moq.
var _ carrier.Service = &ServiceMock{}

// ServiceMock is a mock implementation of carrier.Service.
//
//	func TestSomethingThatUsesService(t *testing.T) {
//
//		// make and configure a mocked carrier.Service
//		mockedService := &ServiceMock{
//			CreateFunc: func(ctx context.Context, carrierMoqParam *carrier.Carrier) (*carrier.Carrier, error) {
//				panic("mock out the Create method")
//			},
//		}
//
//		// use mockedService in code that requires carrier.Service
//		// and then make assertions.
//
//	}
type ServiceMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, carrierMoqParam *carrier.Carrier) (*carrier.Carrier, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CarrierMoqParam is the carrierMoqParam argument value.
			CarrierMoqParam *carrier.Carrier
		}
	}
	lockCreate sync.RWMutex
}

// Create calls CreateFunc.
func (mock *ServiceMock) Create(ctx context.Context, carrierMoqParam *carrier.Carrier) (*carrier.Carrier, error) {
	if mock.CreateFunc == nil {
		panic("ServiceMock.CreateFunc: method is nil but Service.Create was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		CarrierMoqParam *carrier.Carrier
	}{
		Ctx:             ctx,
		CarrierMoqParam: carrierMoqParam,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, carrierMoqParam)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedService.CreateCalls())
func (mock *ServiceMock) CreateCalls() []struct {
	Ctx             context.Context
	CarrierMoqParam *carrier.Carrier
} {
	var calls []struct {
		Ctx             context.Context
		CarrierMoqParam *carrier.Carrier
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}
