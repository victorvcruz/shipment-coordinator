// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/google/uuid"
	"github.com/victorvcruz/shipment-coordinator/internal/carrier"
	"sync"
)

// Ensure, that RepositoryMock does implement carrier.Repository.
// If this is not the case, regenerate this file with moq.
var _ carrier.Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of carrier.Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked carrier.Repository
//		mockedRepository := &RepositoryMock{
//			CreateFunc: func(ctx context.Context, carrierMoqParam *carrier.Carrier) (uuid.UUID, error) {
//				panic("mock out the Create method")
//			},
//			GetByIDFunc: func(ctx context.Context, id uuid.UUID) (*carrier.Carrier, error) {
//				panic("mock out the GetByID method")
//			},
//			ListAllFunc: func(ctx context.Context) ([]carrier.Carrier, error) {
//				panic("mock out the ListAll method")
//			},
//			ListAllByRegionFunc: func(ctx context.Context, region string) ([]carrier.Carrier, error) {
//				panic("mock out the ListAllByRegion method")
//			},
//		}
//
//		// use mockedRepository in code that requires carrier.Repository
//		// and then make assertions.
//
//	}
type RepositoryMock struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(ctx context.Context, carrierMoqParam *carrier.Carrier) (uuid.UUID, error)

	// GetByIDFunc mocks the GetByID method.
	GetByIDFunc func(ctx context.Context, id uuid.UUID) (*carrier.Carrier, error)

	// ListAllFunc mocks the ListAll method.
	ListAllFunc func(ctx context.Context) ([]carrier.Carrier, error)

	// ListAllByRegionFunc mocks the ListAllByRegion method.
	ListAllByRegionFunc func(ctx context.Context, region string) ([]carrier.Carrier, error)

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// CarrierMoqParam is the carrierMoqParam argument value.
			CarrierMoqParam *carrier.Carrier
		}
		// GetByID holds details about calls to the GetByID method.
		GetByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID uuid.UUID
		}
		// ListAll holds details about calls to the ListAll method.
		ListAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// ListAllByRegion holds details about calls to the ListAllByRegion method.
		ListAllByRegion []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Region is the region argument value.
			Region string
		}
	}
	lockCreate          sync.RWMutex
	lockGetByID         sync.RWMutex
	lockListAll         sync.RWMutex
	lockListAllByRegion sync.RWMutex
}

// Create calls CreateFunc.
func (mock *RepositoryMock) Create(ctx context.Context, carrierMoqParam *carrier.Carrier) (uuid.UUID, error) {
	if mock.CreateFunc == nil {
		panic("RepositoryMock.CreateFunc: method is nil but Repository.Create was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		CarrierMoqParam *carrier.Carrier
	}{
		Ctx:             ctx,
		CarrierMoqParam: carrierMoqParam,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(ctx, carrierMoqParam)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//
//	len(mockedRepository.CreateCalls())
func (mock *RepositoryMock) CreateCalls() []struct {
	Ctx             context.Context
	CarrierMoqParam *carrier.Carrier
} {
	var calls []struct {
		Ctx             context.Context
		CarrierMoqParam *carrier.Carrier
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// GetByID calls GetByIDFunc.
func (mock *RepositoryMock) GetByID(ctx context.Context, id uuid.UUID) (*carrier.Carrier, error) {
	if mock.GetByIDFunc == nil {
		panic("RepositoryMock.GetByIDFunc: method is nil but Repository.GetByID was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  uuid.UUID
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockGetByID.Lock()
	mock.calls.GetByID = append(mock.calls.GetByID, callInfo)
	mock.lockGetByID.Unlock()
	return mock.GetByIDFunc(ctx, id)
}

// GetByIDCalls gets all the calls that were made to GetByID.
// Check the length with:
//
//	len(mockedRepository.GetByIDCalls())
func (mock *RepositoryMock) GetByIDCalls() []struct {
	Ctx context.Context
	ID  uuid.UUID
} {
	var calls []struct {
		Ctx context.Context
		ID  uuid.UUID
	}
	mock.lockGetByID.RLock()
	calls = mock.calls.GetByID
	mock.lockGetByID.RUnlock()
	return calls
}

// ListAll calls ListAllFunc.
func (mock *RepositoryMock) ListAll(ctx context.Context) ([]carrier.Carrier, error) {
	if mock.ListAllFunc == nil {
		panic("RepositoryMock.ListAllFunc: method is nil but Repository.ListAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListAll.Lock()
	mock.calls.ListAll = append(mock.calls.ListAll, callInfo)
	mock.lockListAll.Unlock()
	return mock.ListAllFunc(ctx)
}

// ListAllCalls gets all the calls that were made to ListAll.
// Check the length with:
//
//	len(mockedRepository.ListAllCalls())
func (mock *RepositoryMock) ListAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockListAll.RLock()
	calls = mock.calls.ListAll
	mock.lockListAll.RUnlock()
	return calls
}

// ListAllByRegion calls ListAllByRegionFunc.
func (mock *RepositoryMock) ListAllByRegion(ctx context.Context, region string) ([]carrier.Carrier, error) {
	if mock.ListAllByRegionFunc == nil {
		panic("RepositoryMock.ListAllByRegionFunc: method is nil but Repository.ListAllByRegion was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Region string
	}{
		Ctx:    ctx,
		Region: region,
	}
	mock.lockListAllByRegion.Lock()
	mock.calls.ListAllByRegion = append(mock.calls.ListAllByRegion, callInfo)
	mock.lockListAllByRegion.Unlock()
	return mock.ListAllByRegionFunc(ctx, region)
}

// ListAllByRegionCalls gets all the calls that were made to ListAllByRegion.
// Check the length with:
//
//	len(mockedRepository.ListAllByRegionCalls())
func (mock *RepositoryMock) ListAllByRegionCalls() []struct {
	Ctx    context.Context
	Region string
} {
	var calls []struct {
		Ctx    context.Context
		Region string
	}
	mock.lockListAllByRegion.RLock()
	calls = mock.calls.ListAllByRegion
	mock.lockListAllByRegion.RUnlock()
	return calls
}
